<?php
	// vim:ft=php

	// Datenbankverbindung. Dieses Script verwendet PDO, dessen Syntax
	// ist demnach zu verwenden. z.B. für MySQL:
	//  $database_conn = array('mysql:host=localhost;dbname=zettel', "root", "");
	// Vorkonfiguriert ist SQLite:
	$database_conn = array('sqlite:'.getcwd().'/database.sqlite', null, null);

	// Beim ersten Start muss die Datenbank initialisiert werden. Dafür hier
	// true eintragen:
	$init_database = false;

	// Das Verzeichnis, in dem der Cache angelegt werden soll. Muss nicht im Document
	// Root liegen
	$cache_dir = getcwd().'/cache/';
	
	// Maximale Dateigröße im Cache
	$allowed_cache_file_size = 1024 * 1024 * 2;

	// Erlaubte MIME-Dateitypen im Cache
	$allowed_cache_types = array(
		'application/pdf',
		'image/png',
		'image/jpg',
		'image/jpeg',
		'image/gif',
		'application/postscript',
		'text/html',
		'text/plain',
		'application/xhtml+xml'
	);

	// Das Script verwendet eine Semaphore, um Toolkit-Ausführungen zu kanalisieren
	// Wie viele gleichzeitige Ausführungen sind erlaubt?
	$max_concurrent_toolkit_invokations = 10;

	// Registrierung auf bestimmte IP-Bereiche beschränken
	$restrict_registration = array(
		//'Freie Universität Berlin' => '160.45.0.0/16',
		//'Technische Universität Berlin' => '130.149.0.0/16',
		//'Humboldt Universität Berlin' => '141.20.0.0/16',
		//'Heimnetz' => '192.168.0.1/24',
	);

	// Sollen generell alle HTTP-Links gecached werden?
	// Das Cachen von Dateien ist nicht ganz unproblematisch - der Zugang zu den
	// Cookies wird zwar beschränkt, trotzdem sind Angriffe via AJAX, bzw. auf Frames
	// der Seite, möglich! Da auch andere Content-Typen als HTML scriptbar sind,
	// ist das für's erste standardmäßig deaktiviert..
	$cache_everything = false;

	// Ist diese Variable gesetzt, so wird eine Logdatei über alle Administrator-
	// aktionen erstellt
	$admin_log_file = getcwd().'/cache/adminlog.log';

	// Support-Email (wird auf der Login-Seite verlinkt)
	$support_mail = 'uebungen@lists.spline.inf.fu-berlin.de';

	// Hier kann ein zufälliger String eingetragen werden, der verwendet wird um verschiedene
	// Hashfunktionen zusätzlich abzusichern.
	$secure_token = '';

	// Mit diesem Sicherheitstoken kann Cron vor Zugriff von außen geschützt werden. Cron wird
	// dann nur ausgeführt, falls ?t=<token> gesetzt ist
	$cron_token = '';

	// Soll Cron detaillierte Debug-Informationen ausgeben? (Zur Fehlerbehandlung durch den
	// Administrator)
	$cron_debug = true;
